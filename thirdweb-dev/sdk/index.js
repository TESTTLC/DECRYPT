var On=Object.create;var oe=Object.defineProperty,Nn=Object.defineProperties,Bn=Object.getOwnPropertyDescriptor,Mn=Object.getOwnPropertyDescriptors,Ln=Object.getOwnPropertyNames,Ja=Object.getOwnPropertySymbols,Un=Object.getPrototypeOf,Qa=Object.prototype.hasOwnProperty,$n=Object.prototype.propertyIsEnumerable;var Jr=(o,t,e)=>t in o?oe(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e,S=(o,t)=>{for(var e in t||(t={}))Qa.call(t,e)&&Jr(o,e,t[e]);if(Ja)for(var e of Ja(t))$n.call(t,e)&&Jr(o,e,t[e]);return o},_=(o,t)=>Nn(o,Mn(t)),c=(o,t)=>oe(o,"name",{value:t,configurable:!0});var Vn=(o,t)=>{for(var e in t)oe(o,e,{get:t[e],enumerable:!0})},Ya=(o,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Ln(t))!Qa.call(o,a)&&a!==e&&oe(o,a,{get:()=>t[a],enumerable:!(r=Bn(t,a))||r.enumerable});return o};var X=(o,t,e)=>(e=o!=null?On(Un(o)):{},Ya(t||!o||!o.__esModule?oe(e,"default",{value:o,enumerable:!0}):e,o)),Gn=o=>Ya(oe({},"__esModule",{value:!0}),o);var f=(o,t,e)=>(Jr(o,typeof t!="symbol"?t+"":t,e),e);var Bs={};Vn(Bs,{ALL_ROLES:()=>Yr,AdminRoleMissingError:()=>ia,AssetNotFoundError:()=>ta,AuctionAlreadyStartedError:()=>ke,AuctionHasNotEndedError:()=>Re,BaseSignaturePayloadInput:()=>ga,CONTRACTS_MAP:()=>ir,CONTRACT_ADDRESSES:()=>br,ChainId:()=>h,ChainlinkVrf:()=>he,ClaimConditionInputArray:()=>ua,ClaimConditionInputSchema:()=>ce,ClaimConditionOutputSchema:()=>gr,ClaimEligibility:()=>A,CommonContractOutputSchema:()=>P,CommonContractSchema:()=>v,CommonPlatformFeeSchema:()=>M,CommonPrimarySaleSchema:()=>nt,CommonRoyaltySchema:()=>x,CommonSymbolSchema:()=>L,CommonTrustedForwarderSchema:()=>k,ContractDeployer:()=>dr,ContractEncoder:()=>E,ContractEvents:()=>R,ContractInterceptor:()=>Xt,ContractMetadata:()=>W,ContractPrimarySale:()=>st,ContractRoles:()=>O,ContractRoyalty:()=>tt,CurrencySchema:()=>co,CurrencyValueSchema:()=>la,CustomContract:()=>ae,DEFAULT_IPFS_GATEWAY:()=>xa,DEFAULT_QUERY_ALL_COUNT:()=>ye,DelayedReveal:()=>nr,DropErc1155ClaimConditions:()=>Ue,DropErc1155History:()=>$e,DropErc721ClaimConditions:()=>Me,DuplicateFileNameError:()=>xe,DuplicateLeafsError:()=>Pe,Edition:()=>J,EditionDrop:()=>I,EditionMetadataInputOrUriSchema:()=>Rs,EditionMetadataInputSchema:()=>ks,EditionMetadataOutputSchema:()=>Fr,EditionMetadataWithOwnerOutputSchema:()=>Ps,Erc1155:()=>Yt,Erc1155SignatureMinting:()=>qe,Erc20:()=>Ge,Erc20SignatureMinting:()=>ze,Erc721:()=>Qt,Erc721SignatureMinting:()=>Ze,EventType:()=>ht,FetchError:()=>Ee,FileNameMissingError:()=>ea,FunctionDeprecatedError:()=>na,GasCostEstimator:()=>F,InterfaceId_IERC1155:()=>Nt,InterfaceId_IERC721:()=>Ot,InvalidAddressError:()=>Xr,IpfsStorage:()=>mr,ListingNotFoundError:()=>yt,ListingType:()=>$,Marketplace:()=>G,MarketplaceAuction:()=>Je,MarketplaceDirect:()=>Ke,MerkleSchema:()=>wt,MintRequest1155:()=>ba,MintRequest20:()=>Sa,MintRequest721:()=>Ta,MissingOwnerRoleError:()=>aa,MissingRoleError:()=>Ae,NATIVE_TOKENS:()=>io,NATIVE_TOKEN_ADDRESS:()=>xt,NFTCollection:()=>K,NFTDrop:()=>H,NotEnoughTokensError:()=>ra,NotFoundError:()=>lt,OZ_DEFENDER_FORWARDER_ADDRESS:()=>pe,OptionalPropertiesInput:()=>ha,OptionalPropertiesOutput:()=>fa,PINATA_IPFS_URL:()=>Pa,Pack:()=>j,PartialClaimConditionInputSchema:()=>Zn,ProposalState:()=>Ra,QuantityAboveLimitError:()=>oa,REMOTE_CONTRACT_NAME:()=>za,REMOTE_CONTRACT_TO_CONTRACT_TYPE:()=>Hr,RestrictedTransferError:()=>sa,SUPPORTED_CHAIN_IDS:()=>da,Signature1155PayloadInput:()=>wa,Signature1155PayloadOutput:()=>Ca,Signature20PayloadInput:()=>Sr,Signature20PayloadOutput:()=>ya,Signature721PayloadInput:()=>_e,Signature721PayloadOutput:()=>Tr,SnapshotAddress:()=>fr,SnapshotInfoSchema:()=>zn,SnapshotInputSchema:()=>Ht,SnapshotSchema:()=>se,Split:()=>Y,TW_IPFS_SERVER_URL:()=>Ea,ThirdwebSDK:()=>Ka,Token:()=>V,TokenERC20History:()=>je,TokenMintInputSchema:()=>Fs,TransactionError:()=>lr,UnderlyingType:()=>Ma,UploadError:()=>ve,Vote:()=>Q,VoteType:()=>Zt,WrongListingTypeError:()=>Gt,convertToTWError:()=>ca,createSnapshot:()=>ka,getContractAddressByChainId:()=>de,getNativeTokenByChainId:()=>ma,getRoleHash:()=>D,hashLeafNode:()=>Ao});module.exports=Gn(Bs);var ou=require("cross-fetch/polyfill");var E=class{constructor(t){this.contractWrapper=t}encode(t,e){return this.contractWrapper.readContract.interface.encodeFunctionData(t,e)}decode(t,e){return this.contractWrapper.readContract.interface.decodeFunctionData(t,e)}};c(E,"ContractEncoder");var W=class{constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),e=await this.storage.get(t);return this.parseOutputMetadata(e)}async set(t){let e=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[e]),data:this.get}}async update(t){return await this.set(S(S({},await this.get()),t))}async _parseAndUploadMetadata(t){let e=this.parseInputMetadata(t);return this.storage.uploadMetadata(e)}};c(W,"ContractMetadata");var Qr=require("ethers"),Xa={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"},Yr=Object.keys(Xa);function D(o){return o==="admin"?Qr.ethers.utils.hexZeroPad([0],32):Qr.ethers.utils.id(Xa[o])}c(D,"getRoleHash");var jt=X(require("tiny-invariant"));var lt=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};c(lt,"NotFoundError");var Xr=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};c(Xr,"InvalidAddressError");var Ae=class extends Error{constructor(t,e){super(`MISSING ROLE: ${t} does not have the '${e}' role`)}};c(Ae,"MissingRoleError");var ta=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};c(ta,"AssetNotFoundError");var ve=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};c(ve,"UploadError");var ea=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};c(ea,"FileNameMissingError");var xe=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};c(xe,"DuplicateFileNameError");var ra=class extends Error{constructor(t,e,r){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${e} tokens. You have ${r} tokens available.`)}};c(ra,"NotEnoughTokensError");var aa=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};c(aa,"MissingOwnerRoleError");var oa=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};c(oa,"QuantityAboveLimitError");var Ee=class extends Error{constructor(t,e){super(`FETCH_FAILED: ${t}`);this.innerError=e}};c(Ee,"FetchError");var Pe=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};c(Pe,"DuplicateLeafsError");var ke=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};c(ke,"AuctionAlreadyStartedError");var na=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};c(na,"FunctionDeprecatedError");var yt=class extends Error{constructor(t,e){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}`)}};c(yt,"ListingNotFoundError");var Gt=class extends Error{constructor(t,e,r,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${e?` listing id: ${e}`:""}${a?` expected type: ${a}`:""}${r?` actual type: ${r}`:""}`)}};c(Gt,"WrongListingTypeError");var sa=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};c(sa,"RestrictedTransferError");var ia=class extends Error{constructor(t,e,r="Failed to execute transaction"){super(`${r}, admin role is missing${t?` on address: ${t}`:""}${e?` on contract: ${e}`:""}`)}};c(ia,"AdminRoleMissingError");var Re=class extends Error{constructor(t,e){super(`Auction has not ended yet${t?`, id: ${t}`:""}${e?`, end time: ${e.toString()}`:""}`)}};c(Re,"AuctionHasNotEndedError");var lr=class extends Error{constructor(t,e,r,a,n,s,i){let p=`Contract transaction failed

`;p+=`Message: ${t}`,p+=`

| Transaction info |
`,p+=be("from",e),p+=be("to",r),p+=be("data",a),p+=be("chain",`${n.name} (${n.chainId})`);try{let d=new URL(s);p+=be("RPC",d.hostname)}catch{}p+=`

`,p+="Need help with this error? Join our community: https://discord.gg/thirdweb",p+=`



`,p+="| Raw error |",p+=`

`,p+=i;super(p);this.reason=t,this.from=e,this.to=r,this.data=a,this.chain=n,this.rpcUrl=s}};c(lr,"TransactionError");async function ca(o,t,e,r){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=We(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=We(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=We(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),p=We(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),d=We(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return d===""&&(d=r),p===""&&(p=e),new lr(n,p,d,s,t,i,a)}c(ca,"convertToTWError");function be(o,t){if(t==="")return t;let e=Array(10-o.length).fill(" ").join("");return`
${o}:${e}${t}`}c(be,"withSpaces");function We(o,t){let e=t.match(o)||[],r="";return(e==null?void 0:e.length)>0&&(r+=e[1]),r}c(We,"parseMessageParts");var O=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){(0,jt.default)(this.roles.length,"this contract has no support for roles");let t={};for(let e of this.roles)t[e]=await this.get(e);return t}async get(t){(0,jt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=D(t),r=(await this.contractWrapper.readContract.getRoleMemberCount(e)).toNumber();return await Promise.all(Array.from(Array(r).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(e,a)))}async setAll(t){let e=Object.keys(t);(0,jt.default)(e.length,"you must provide at least one role to set"),(0,jt.default)(e.every(n=>this.roles.includes(n)),"this contract does not support the given role");let r=await this.getAll(),a=[];return e.sort(n=>n==="admin"?1:-1).forEach(async n=>{let s=t[n]||[],i=r[n]||[],p=s.filter(m=>!i.includes(m)),d=i.filter(m=>!s.includes(m));p.length&&p.forEach(m=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[D(n),m]))}),d.length&&d.forEach(async m=>{let u=await this.getRevokeRoleFunctionName(m);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(u,[D(n),m]))})}),{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,e){await Promise.all(t.map(async r=>{if(!(await this.get(r)).map(n=>n.toLowerCase()).includes(e.toLowerCase()))throw new Ae(e,r)}))}async grant(t,e){return(0,jt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[D(t),e])}}async revoke(t,e){(0,jt.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await this.getRevokeRoleFunctionName(e);return{receipt:await this.contractWrapper.sendTransaction(r,[D(t),e])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};c(O,"ContractRoles");var ur=require("ethers"),to=require("ethers/lib/utils"),C=require("zod");var kt=c(()=>typeof window<"u","isBrowser");globalThis.File||(globalThis.File=require("@web-std/file").File);var pa=1e4,jn=kt()?[C.z.instanceof(File),C.z.string()]:[C.z.instanceof(Buffer),C.z.string()],Rt=C.z.union(jn),eo=C.z.union([C.z.array(C.z.number()),C.z.string()]),T=C.z.union([C.z.string(),C.z.number(),C.z.bigint(),C.z.instanceof(ur.BigNumber)]).transform(o=>ur.BigNumber.from(o)),ct=T.transform(o=>o.toString()),Ft=C.z.number().max(pa,"Cannot exeed 100%").min(0,"Cannot be below 0%"),ro=C.z.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Hn=C.z.union([C.z.string(),C.z.number(),C.z.boolean(),C.z.null()]),vt=C.z.lazy(()=>C.z.union([Hn,C.z.array(vt),C.z.record(vt)])),ao=C.z.record(vt),oo=C.z.union([C.z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),C.z.string().length(0)]),pt=C.z.string().refine(o=>(0,to.isAddress)(o),o=>({message:`${o} is not a valid address`})),N=C.z.union([C.z.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),C.z.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),no=C.z.date().transform(o=>ur.BigNumber.from(Math.floor(o.getTime()/1e3))),hr=no.default(new Date),so=no.default(new Date(Date.now()+1e3*60*60*24*365*10));var Wa=require("@ethersproject/constants"),rt=require("zod");var ie=require("zod"),Fe=require("ethers");var po=require("ethers/lib/utils");var h;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.TLChain=5177]="TLChain",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(h||(h={}));var da=[h.TLChain,h.Mainnet,h.Rinkeby,h.Goerli,h.Polygon,h.Mumbai,h.Fantom,h.FantomTestnet,h.Avalanche,h.AvalancheFujiTestnet];var xt="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",io={[h.TLChain]:{name:"TLChain",symbol:"TLC",decimals:18,wrapped:{address:"0x5491952C8C5f2C2Ce5025847E1b0Df6eefc726f6",name:"TLChain",symbol:"TLC"}},[h.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[h.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[h.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[h.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[h.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[h.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function ma(o){return io[o]}c(ma,"getNativeTokenByChainId");var ne=require("zod");var co=ne.z.object({name:ne.z.string(),symbol:ne.z.string(),decimals:ne.z.number()}),la=co.extend({value:T,displayValue:ne.z.string()});var B=require("zod"),wt=B.z.object({merkle:B.z.record(B.z.string()).default({})}),fr=B.z.object({address:B.z.string(),maxClaimable:B.z.number().default(0)}),Ht=B.z.union([B.z.array(B.z.string()).transform(o=>o.map(t=>fr.parse({address:t}))),B.z.array(fr)]),se=B.z.object({merkleRoot:B.z.string(),claims:B.z.array(fr.extend({proof:B.z.array(B.z.string())}))}),zn=B.z.object({merkleRoot:B.z.string(),snapshotUri:B.z.string(),snapshot:se});var ce=ie.z.object({startTime:hr,currencyAddress:ie.z.string().default(xt),price:N.default(0),maxQuantity:ct.default(Fe.ethers.constants.MaxUint256),quantityLimitPerTransaction:ct.default(Fe.ethers.constants.MaxUint256),waitInSeconds:ct.default(0),merkleRootHash:eo.default((0,po.hexZeroPad)([0],32)),snapshot:ie.z.optional(Ht)}),ua=ie.z.array(ce),Zn=ce.partial(),gr=ce.extend({availableSupply:ie.z.string().default(""),currencyMetadata:la.default({value:Fe.BigNumber.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:T,maxQuantity:T,quantityLimitPerTransaction:T,waitInSeconds:T,startTime:T.transform(o=>new Date(o.toNumber()*1e3))});var _t=require("zod");var ut=require("zod");var It=require("zod");var mo=vt.or(Rt),qn=It.z.union([It.z.array(It.z.object({key:It.z.string(),value:mo})).superRefine((o,t)=>{if(!o)return;let e={};o.forEach(({key:r},a)=>{e[r]||(e[r]=0),e[r]++,e[r]>1&&t.addIssue({code:It.z.ZodIssueCode.custom,message:`Duplicate key: ${r}`,path:[a,"key"]})})}),It.z.record(mo)]).optional(),ha=It.z.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(e=>e.value):t},qn).transform(o=>Array.isArray(o)?o.reduce((t,e)=>_(S({},t),{[e.key]:e.value}),{}):o),fa=ao.optional();var lo=ut.z.object({name:ut.z.string().nonempty({message:"A name is required."}),description:ut.z.string().optional(),image:Rt.optional(),external_url:Rt.optional()}).catchall(ut.z.lazy(()=>vt)),Kn=lo.extend({id:T,uri:ut.z.string(),image:ut.z.string().optional(),external_url:ut.z.string().optional()}),ot=lo.extend({animation_url:Rt.optional(),background_color:oo.optional(),properties:ha}),yr=ut.z.union([ot,ut.z.string()]),wr=Kn.extend({animation_url:ut.z.string().optional(),properties:fa});var Cr=require("@ethersproject/constants"),fo=require("ethers");var uo=require("uuid"),Ie=require("ethers/lib/utils");function ho(o){if(o===void 0){let t=Buffer.alloc(16);return(0,uo.v4)({},t),(0,Ie.hexlify)((0,Ie.toUtf8Bytes)(t.toString("hex")))}else return(0,Ie.hexlify)(o)}c(ho,"resolveOrGenerateId");var ga=_t.z.object({to:_t.z.string().default(Cr.AddressZero),price:N.default(0),currencyAddress:_t.z.string().default(xt),mintStartTime:hr,mintEndTime:so,uid:_t.z.string().optional().transform(o=>ho(o)),primarySaleRecipient:_t.z.string().default(Cr.AddressZero)}),Sr=ga.extend({quantity:N}),ya=Sr.extend({mintStartTime:T,mintEndTime:T}),_e=ga.extend({metadata:yr,royaltyRecipient:_t.z.string().default(Cr.AddressZero),royaltyBps:Ft.default(0)}),Tr=_e.extend({uri:_t.z.string(),royaltyBps:T,mintStartTime:T,mintEndTime:T}),wa=_e.extend({tokenId:ct.default(fo.ethers.constants.MaxUint256),quantity:ct}),Ca=Tr.extend({tokenId:T,quantity:T}),Sa=[{name:"to",type:"address"},{name:"primarySaleRecipient",type:"address"},{name:"quantity",type:"uint256"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],Ta=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],ba=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var v=rt.z.object({name:rt.z.string(),description:rt.z.string().optional(),image:Rt.optional(),external_link:rt.z.string().url().optional()}),P=v.extend({image:rt.z.string().optional()}).catchall(rt.z.lazy(()=>vt)),x=rt.z.object({seller_fee_basis_points:Ft.default(0),fee_recipient:pt.default(Wa.AddressZero)}),nt=rt.z.object({primary_sale_recipient:pt}),M=rt.z.object({platform_fee_basis_points:Ft.default(0),platform_fee_recipient:pt.default(Wa.AddressZero)}),k=rt.z.object({trusted_forwarders:rt.z.array(pt).default([])}),L=rt.z.object({symbol:rt.z.string().optional().default("")});var tt=class{constructor(t,e){this.contractWrapper=t,this.metadata=e}async getDefaultRoyaltyInfo(){let[t,e]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return x.parse({fee_recipient:t,seller_fee_basis_points:e})}async getTokenRoyaltyInfo(t){let[e,r]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return x.parse({fee_recipient:e,seller_fee_basis_points:r})}async setDefaultRoyaltyInfo(t){let e=await this.metadata.get(),r=this.metadata.parseInputMetadata(S(S({},e),t)),a=await this.metadata._parseAndUploadMetadata(r),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[r.fee_recipient,r.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,e){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,e.fee_recipient,e.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};c(tt,"ContractRoyalty");var st=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};c(st,"ContractPrimarySale");var Ro=require("@thirdweb-dev/contracts"),Be=require("ethers");var xo=require("@ethersproject/constants");var b=require("ethers");var me=require("@ethersproject/providers"),Tt=require("ethers"),go=require("eventemitter2");var De=require("@ethersproject/constants");var pe="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",Ct="0x232aEFe7D3C0603c347c3F237f97CF95D238D619",St="0xC4B9D6fF297f2873050175bbf0409c2eeB7046F9",br={[h.TLChain]:{biconomyForwarder:"0x4C86F3C5Dafa55CA760c349263793953BBBc9695",twFactory:St,twRegistry:Ct},[h.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:St,twRegistry:Ct},[h.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:St,twRegistry:Ct},[h.Goerli]:{biconomyForwarder:De.AddressZero,twFactory:St,twRegistry:Ct},[h.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:St,twRegistry:Ct},[h.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:St,twRegistry:Ct},[h.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:St,twRegistry:Ct},[h.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:St,twRegistry:Ct},[h.Fantom]:{biconomyForwarder:De.AddressZero,twFactory:St,twRegistry:Ct},[h.FantomTestnet]:{biconomyForwarder:De.AddressZero,twFactory:St,twRegistry:Ct}};function de(o,t){return o===h.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:De.AddressZero:br[o][t]}c(de,"getContractAddressByChainId");var Z=require("zod"),dt=Z.z.object({readonlySettings:Z.z.object({rpcUrl:Z.z.string().url(),chainId:Z.z.number().optional()}).optional(),gasSettings:Z.z.object({maxPriceInGwei:Z.z.number().min(1,"gas price cannot be less than 1").default(300),speed:Z.z.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:Z.z.union([Z.z.object({openzeppelin:Z.z.object({relayerUrl:Z.z.string().url(),relayerForwarderAddress:Z.z.string().default(pe)})}),Z.z.object({biconomy:Z.z.object({apiId:Z.z.string(),apiKey:Z.z.string(),deadlineSeconds:Z.z.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var Dt=class extends go.EventEmitter2{constructor(t,e){super();let[r,a]=this.getSignerAndProvider(t,e);this.signer=r,this.provider=a;try{this.options=dt.parse(e)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=dt.parse({})}}updateSignerOrProvider(t){let[e,r]=this.getSignerAndProvider(t,this.options);this.signer=e,this.provider=r}isReadOnly(){return!Tt.Signer.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,e){var n;let r,a;return Tt.Signer.isSigner(t)&&(r=t,t.provider&&(a=t.provider)),e!=null&&e.readonlySettings&&(a=this.getReadOnlyProvider(e.readonlySettings.rpcUrl,e.readonlySettings.chainId)),a||(me.Provider.isProvider(t)?a=t:Tt.Signer.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=e==null?void 0:e.readonlySettings)==null?void 0:n.chainId):a=Tt.ethers.getDefaultProvider(t))),a||(a=Tt.ethers.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[r,a]}getReadOnlyProvider(t,e){try{let r=t.match(/^(ws|http)s?:/i);if(r)switch(r[1]){case"http":return new me.JsonRpcBatchProvider(t,e);case"ws":return new me.WebSocketProvider(t,e);default:return Tt.ethers.getDefaultProvider(t)}else return Tt.ethers.getDefaultProvider(t)}catch{return Tt.ethers.getDefaultProvider(t)}}};c(Dt,"RPCConnectionHandler");var ht;(function(o){o.Transaction="transaction",o.Signature="signature"})(ht||(ht={}));var zt=X(require("tiny-invariant"));var Wr=require("ethers"),wo=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],Co=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],le={},yo={};async function Aa(o,t,e){let r=e.join("|"),a=yo[r],n=Date.now()-a>=2e3;if(!(r in le)||n){let i=await o.functions[t](...e);Array.isArray(i)&&i.length>0?le[r]=Wr.BigNumber.from(i[0]):le[r]=Wr.BigNumber.from(i),yo[r]=Date.now()}let s=le[r];return le[r]=Wr.BigNumber.from(le[r]).add(1),s}c(Aa,"getAndIncrementNonce");var vo=require("@thirdweb-dev/contracts");var bt=require("ethers");var Ar=require("ethers");async function Oe(o,t,e,r){var i,p;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=Ar.ethers.utils._TypedDataEncoder.getPayload(t,e,r),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,e,r)}catch(d){if((p=d==null?void 0:d.message)!=null&&p.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw d}return{payload:n,signature:Ar.ethers.utils.joinSignature(Ar.ethers.utils.splitSignature(s))}}c(Oe,"signTypedDataInternal");var Jn=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],Qn=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],Yn=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function Xn(o,t){let e=new bt.Contract(t,Yn,o);try{return await e.nonces(await o.getAddress())}catch{return await e.getNonce(await o.getAddress())}}c(Xn,"getSignerNonce");async function ts(o,t){let e=new bt.Contract(t,Qn,o);try{return await e.DOMAIN_SEPARATOR()}catch{return await e.getDomainSeperator()}}c(ts,"getDomainSeperator");async function es(o,t){return new bt.Contract(t,Jn,o).name()}c(es,"getTokenName");async function rs(o,t){let e=await ts(o,t.verifyingContract),r={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:bt.ethers.utils.hexZeroPad(bt.BigNumber.from(t.chainId).toHexString(),32)};return bt.ethers.utils._TypedDataEncoder.hashDomain(r)===e?r:t}c(rs,"getChainDomainSeperator");async function So(o,t,e,r,a,n,s){let i=await rs(o,{name:await es(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await Xn(o,t)).toString(),n=n!=null?n:bt.ethers.constants.MaxUint256;let p={owner:e,spender:r,value:a,nonce:s,deadline:n},d={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:m}=await Oe(o,i,d,p);return{message:p,signature:m}}c(So,"signEIP2612Permit");var vr=require("ethers");function as(o){switch(o){case h.Polygon:return"https://gasstation-mainnet.matic.network/v2";case h.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}c(as,"getGasStationUrl");var os=vr.ethers.utils.parseUnits("31","gwei"),ns=vr.ethers.utils.parseUnits("1","gwei");function ss(o){switch(o){case h.Polygon:return os;case h.Mumbai:return ns}}c(ss,"getDefaultGasFee");async function To(o){let t=as(o);try{let r=(await(await fetch(t)).json()).standard.maxPriorityFee;if(r>0){let a=parseFloat(r).toFixed(9);return vr.ethers.utils.parseUnits(a,"gwei")}}catch(e){console.error("failed to fetch gas",e)}return ss(o)}c(To,"getPolygonGasPriorityFee");var ue=require("ethers");var he={[h.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:ue.ethers.utils.parseEther("0.0001")},[h.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ue.ethers.utils.parseEther("0.0001")},[h.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:ue.ethers.utils.parseEther("0.1")},[h.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:ue.ethers.utils.parseEther("2")},[h.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:ue.ethers.utils.parseEther("0.0001")}};var va=require("ethers/lib/utils"),Ot=(0,va.arrayify)("0x80ac58cd"),Nt=(0,va.arrayify)("0xd9b67a26");var xa="https://gateway.ipfscdn.io/ipfs/",Ea="https://upload.nftlabs.co",Pa="https://api.pinata.cloud/pinning/pinFileToIPFS";var bo=X(require("merkletreejs"));var Wo=X(require("keccak256")),xr=require("ethers");async function ka(o,t){let e=Ht.parse(o),r=e.map(d=>d.address);if(new Set(r).size<r.length)throw new Pe;let n=e.map(d=>Ao(d.address,d.maxClaimable)),s=new bo.default(n,Wo.default,{sort:!0}),i=se.parse({merkleRoot:s.getHexRoot(),claims:e.map((d,m)=>{let u=s.getHexProof(n[m]);return{address:d.address,maxClaimable:d.maxClaimable,proof:u}})}),p=await t.uploadMetadata(i);return{merkleRoot:s.getHexRoot(),snapshotUri:p,snapshot:i}}c(ka,"createSnapshot");function Ao(o,t){return xr.ethers.utils.solidityKeccak256(["address","uint256"],[o,xr.BigNumber.from(t)])}c(Ao,"hashLeafNode");var w=class extends Dt{customOverrides=()=>({});constructor(t,e,r,a){super(t,a);this.writeContract=new b.Contract(e,r,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:e}=await t.getNetwork();return e}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){if(kt())return{};let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let r=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:b.ethers.utils.parseUnits("1","gwei"),s;r===h.Mumbai||r===h.Polygon?s=await To(r):s=b.BigNumber.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a;switch(e){case"standard":a=b.BigNumber.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=b.ethers.utils.parseUnits(r.toString(),"gwei"),i=b.ethers.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),e=this.options.gasSettings.speed,r=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(e){case"standard":n=b.BigNumber.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=b.ethers.utils.parseUnits(r.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,e){this.emit(ht.Transaction,{status:t,transactionHash:e})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,e){return this.writeContract.estimateGas[t](...e)}withTransactionOverride(t){this.customOverrides=t}async sendTransaction(t,e,r){var a;if(r||(r=await this.getCallOverrides()),r=S(S({},r),this.customOverrides()),this.customOverrides=()=>({}),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,e,r);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,e,r);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,e,r){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...e,r)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),p=await this.readContract.address;throw await ca(n,s,i,p)}}async sendGaslessTransaction(t,e=[],r){let a=this.getSigner();(0,zt.default)(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,p=(r==null?void 0:r.value)||0;if(b.BigNumber.from(p).gt(0))throw new Error("Cannot send native token value with gasless transaction");let d=this.writeContract.interface.encodeFunctionData(t,e),m=await this.writeContract.estimateGas[t](...e),u=m.mul(2);m.lt(25e3)&&(u=b.BigNumber.from(5e5));let g={from:s,to:i,data:d,chainId:n,gasLimit:u,functionName:t.toString(),functionArgs:e,callOverrides:r};return await this.defaultGaslessSendFunction(g)}async signTypedData(t,e,r,a){this.emit(ht.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await Oe(t,e,r,a);return this.emit(ht.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,e){if(!e||e.length===0)return[];let r=this.writeContract.interface.getEventTopic(t);return e.filter(n=>n.topics.indexOf(r)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var u,g;(0,zt.default)(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,zt.default)(e&&r,"signer and provider must be set");let a=new b.ethers.Contract(de(t.chainId,"biconomyForwarder"),Co,r),n=0,s=await Aa(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:b.ethers.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((u=this.options)==null?void 0:u.gasless)&&"biconomy"in this.options.gasless&&((g=this.options.gasless.biconomy)==null?void 0:g.deadlineSeconds)||3600)),data:t.data},p=b.ethers.utils.arrayify(b.ethers.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,b.ethers.utils.keccak256(i.data)]));this.emit(ht.Signature,{status:"submitted",message:p,signature:""});let d=await e.signMessage(p);this.emit(ht.Signature,{status:"completed",message:p,signature:d});let m=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,d],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(m.ok){let y=await m.json();if(!y.txHash)throw new Error(`relay transaction failed: ${y.log}`);return y.txHash}throw new Error(`relay transaction failed with status: ${m.status} (${m.statusText})`)}async defenderSendFunction(t){(0,zt.default)(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let e=this.getSigner(),r=this.getProvider();(0,zt.default)(e,"provider is not set"),(0,zt.default)(r,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=vo.Forwarder__factory.connect(a,r),s=await Aa(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},p={ForwardRequest:wo},d={from:t.from,to:t.to,value:b.BigNumber.from(0).toString(),gas:b.BigNumber.from(t.gasLimit).toString(),nonce:b.BigNumber.from(s).toString(),data:t.data},m;if(this.emit(ht.Signature,{status:"submitted",message:d,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let z=t.functionArgs[0],gt=t.functionArgs[1],{message:mt,signature:it}=await So(e,this.writeContract.address,t.from,z,gt),{r:In,s:_n,v:Dn}=b.ethers.utils.splitSignature(it);d={to:this.readContract.address,owner:mt.owner,spender:mt.spender,value:b.BigNumber.from(mt.value).toString(),nonce:b.BigNumber.from(mt.nonce).toString(),deadline:b.BigNumber.from(mt.deadline).toString(),r:In,s:_n,v:Dn},m=it}else{let{signature:z}=await Oe(e,i,p,d);m=z}let u="forward";d!=null&&d.owner&&(u="permit");let g=JSON.stringify({request:d,signature:m,type:u});this.emit(ht.Signature,{status:"completed",message:d,signature:m});let y=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:g});if(y.ok){let z=await y.json();return JSON.parse(z.result).txHash}throw new Error(`relay transaction failed with status: ${y.status} (${y.statusText})`)}};c(w,"ContractWrapper");var fe=require("ethers"),Ne=require("@thirdweb-dev/contracts");var Eo=require("ethers/lib/utils");function Wt(o){return o.toLowerCase()===xt||o.toLowerCase()===xo.AddressZero}c(Wt,"isNativeToken");async function et(o,t,e){let r=await Bt(o,e);return fe.ethers.utils.parseUnits(N.parse(t),r.decimals)}c(et,"normalizePriceValue");async function Bt(o,t){if(Wt(t)){let e=await o.getNetwork(),r=ma(e.chainId);return{name:r.name,symbol:r.symbol,decimals:r.decimals}}else{let e=Ne.TokenERC20__factory.connect(t,o),[r,a,n]=await Promise.all([e.name(),e.symbol(),e.decimals()]);return{name:r,symbol:a,decimals:n}}}c(Bt,"fetchCurrencyMetadata");async function U(o,t,e){let r=await Bt(o,t);return _(S({},r),{value:fe.BigNumber.from(e),displayValue:(0,Eo.formatUnits)(e,r.decimals)})}c(U,"fetchCurrencyValue");async function ft(o,t,e,r){if(Wt(e))r.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,e,Ne.IERC20__factory.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address;return(await s.readContract.allowance(i,p)).lt(t)&&await s.sendTransaction("approve",[p,t]),r}}c(ft,"setErc20Allowance");async function Po(o,t,e,r){let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,t,Ne.IERC20__factory.abi,{}),i=await o.getSignerAddress(),p=o.readContract.address,d=await s.readContract.allowance(i,p),m=fe.BigNumber.from(e).mul(fe.BigNumber.from(r));d.lt(m)&&await s.sendTransaction("approve",[p,d.add(m)])}c(Po,"approveErc20Allowance");var Fo=X(require("deep-equal"));var $;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})($||($={}));var Ra;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Ra||(Ra={}));var Zt;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(Zt||(Zt={}));var A;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(A||(A={}));var qt=require("ethers"),ko=require("@ethersproject/bytes"),Fa=require("@ethersproject/constants");async function Er(o,t,e,r,a,n=[(0,ko.hexZeroPad)([0],32)]){let s=await r.getSignerAddress(),i=0;try{if(!t.merkleRootHash.toString().startsWith(Fa.AddressZero)){let u=await Ia(t.merkleRootHash.toString(),e,a),g=u&&u.find(y=>y.address.toLowerCase()===s.toLowerCase());if(g===void 0)throw new Error("No claim found for this address");n=g.proof,i=g.maxClaimable}}catch(u){if((u==null?void 0:u.message)==="No claim found for this address")throw u;console.warn("failed to check claim condition merkle root hash, continuing anyways",u)}let p=await r.getCallOverrides()||{},d=t.price,m=t.currencyAddress;return d.gt(0)&&(Wt(m)?p.value=qt.BigNumber.from(d).mul(o):await Po(r,m,d,o)),{overrides:p,proofs:n,maxQuantityPerTransaction:qt.BigNumber.from(i),price:d,currencyAddress:m}}c(Er,"prepareClaim");async function Ia(o,t,e){let r=t[o],a;if(r){let n=await e.get(r),s=se.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}c(Ia,"fetchSnapshot");function Pr(o,t,e){if(o>=e.length)throw Error(`Index out of bounds - got index: ${o} with ${e.length} conditions`);let r=ce.parse(S(_(S({},e[o]),{price:e[o].price.toString()}),t)),a=gr.parse(r);return e.map((n,s)=>{let i;return s===o?i=a:i=n,_(S({},i),{price:i.price.toString()})})}c(Pr,"updateExsitingClaimConditions");async function kr(o,t,e,r){let a=await Ia(t,e,r);if(a===void 0)return{proof:[],maxClaimable:0};let n=a.find(s=>s.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return n===void 0?{proof:[],maxClaimable:0}:{proof:n.proof,maxClaimable:n.maxClaimable}}c(kr,"getClaimerProofs");async function Rr(o,t,e){let r=[],a=await Promise.all(o.map(async i=>{if(i.snapshot){let p=await ka(Ht.parse(i.snapshot),e);r.push(p),i.merkleRootHash=p.merkleRoot}return i})),n=ua.parse(a),s=(await Promise.all(n.map(i=>is(i,t)))).sort((i,p)=>{let d=qt.BigNumber.from(i.startTimestamp),m=qt.BigNumber.from(p.startTimestamp);return d.eq(m)?0:d.gt(m)?1:-1});return{snapshotInfos:r,sortedConditions:s}}c(Rr,"processClaimConditionInputs");async function is(o,t){let e=o.currencyAddress===Fa.AddressZero?xt:o.currencyAddress;return{startTimestamp:o.startTime,maxClaimableSupply:o.maxQuantity,supplyClaimed:0,quantityLimitPerTransaction:o.quantityLimitPerTransaction,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await et(t,o.price,e),currency:e,merkleRoot:o.merkleRootHash}}c(is,"convertToContractModel");async function ge(o,t,e,r){let a=await U(t,o.currency,o.pricePerToken),n=await Ia(o.merkleRoot,e,r);return gr.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:qt.BigNumber.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:qt.BigNumber.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}c(ge,"transformResultToClaimCondition");var Io=require("@ethersproject/constants");var Me=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),e=await this.contractWrapper.readContract.getClaimConditionById(t),r=await this.metadata.get();return await ge(e,this.contractWrapper.getProvider(),r.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),e=t.currentStartId.toNumber(),r=t.count.toNumber(),a=[];for(let s=e;s<e+r;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>ge(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e)).length===0}async getClaimIneligibilityReasons(t,e){let r=[],a,n;if(e===void 0)throw new Error("addressToCheck is required");try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(m){return m.message.includes("no public mint condition.")?(r.push(A.NoClaimConditionSet),r):m.message.includes("no active mint condition.")?(r.push(A.NoActiveClaimPhase),r):(r.push(A.Unknown),r)}if(Be.BigNumber.from(n.availableSupply).lt(t)&&r.push(A.NotEnoughSupply),Be.ethers.utils.stripZeros(n.merkleRootHash).length>0){let m=n.merkleRootHash.toString(),u=await this.metadata.get(),g=await kr(e,m,u.merkle,this.storage);try{let[y]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,e,t,g.proof,g.maxClaimable);if(!y)return r.push(A.AddressNotAllowed),r}catch{return r.push(A.AddressNotAllowed),r}}let[i,p]=await this.contractWrapper.readContract.getClaimTimestamp(a,e),d=Be.BigNumber.from(Date.now()).div(1e3);if(i.gt(0)&&d.lt(p)&&(p.eq(Io.MaxUint256)?r.push(A.AlreadyClaimed):r.push(A.WaitBeforeNextClaimTransaction)),n.price.gt(0)&&!kt()){let m=n.price.mul(t),u=this.contractWrapper.getProvider();Wt(n.currencyAddress)?(await u.getBalance(e)).lt(m)&&r.push(A.NotEnoughTokens):(await new w(u,n.currencyAddress,Ro.IERC20__factory.abi,{}).readContract.balanceOf(e)).lt(m)&&r.push(A.NotEnoughTokens)}return r}async set(t,e=!1){let{snapshotInfos:r,sortedConditions:a}=await Rr(t,this.contractWrapper.getProvider(),this.storage),n={};r.forEach(p=>{n[p.merkleRoot]=p.snapshotUri});let s=await this.metadata.get(),i=[];if(!(0,Fo.default)(s.merkle,n)){let p=this.metadata.parseInputMetadata(_(S({},s),{merkle:n})),d=await this.metadata._parseAndUploadMetadata(p);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,e])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,e){let r=await this.getAll(),a=Pr(t,e,r);return await this.set(a)}};c(Me,"DropErc721ClaimConditions");var _o=require("@thirdweb-dev/contracts"),Le=require("ethers");var Do=X(require("deep-equal"));var Oo=require("@ethersproject/constants");var Ue=class{constructor(t,e,r){this.storage=r,this.contractWrapper=t,this.metadata=e}async getActive(t){let e=await this.contractWrapper.readContract.getActiveClaimConditionId(t),r=await this.contractWrapper.readContract.getClaimConditionById(t,e),a=await this.metadata.get();return await ge(r,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let e=await this.contractWrapper.readContract.claimCondition(t),r=e.currentStartId.toNumber(),a=e.count.toNumber(),n=[];for(let i=r;i<r+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>ge(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,e,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,e,r)).length===0}async getClaimIneligibilityReasons(t,e,r){let a=[],n,s;if(r===void 0)throw new Error("addressToCheck is required");try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(u){return u.message.includes("no active mint condition.")?(a.push(A.NoActiveClaimPhase),a):(a.push(A.Unknown),a)}if(Le.BigNumber.from(s.availableSupply).lt(e)&&a.push(A.NotEnoughSupply),Le.ethers.utils.stripZeros(s.merkleRootHash).length>0){let u=s.merkleRootHash.toString(),g=await this.metadata.get(),y=await kr(r,u,g.merkle,this.storage);try{let[z]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,r,t,e,y.proof,y.maxClaimable);if(!z)return a.push(A.AddressNotAllowed),a}catch{return a.push(A.AddressNotAllowed),a}}let[p,d]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,r),m=Le.BigNumber.from(Date.now()).div(1e3);if(p.gt(0)&&m.lt(d)&&(d.eq(Oo.MaxUint256)?a.push(A.AlreadyClaimed):a.push(A.WaitBeforeNextClaimTransaction)),s.price.gt(0)&&!kt()){let u=s.price.mul(e),g=this.contractWrapper.getProvider();Wt(s.currencyAddress)?(await g.getBalance(r)).lt(u)&&a.push(A.NotEnoughTokens):(await new w(g,s.currencyAddress,_o.IERC20__factory.abi,{}).readContract.balanceOf(r)).lt(u)&&a.push(A.NotEnoughTokens)}return a}async set(t,e,r=!1){let{snapshotInfos:a,sortedConditions:n}=await Rr(e,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(d=>{s[d.merkleRoot]=d.snapshotUri});let i=await this.metadata.get(),p=[];for(let d of Object.keys(i.merkle))s[d]=i.merkle[d];if(!(0,Do.default)(i.merkle,s)){let d=this.metadata.parseInputMetadata(_(S({},i),{merkle:s})),m=await this.metadata._parseAndUploadMetadata(d);p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return p.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,r])),{receipt:await this.contractWrapper.multiCall(p)}}async update(t,e,r){let a=await this.getAll(t),n=Pr(e,r,a);return await this.set(t,n)}};c(Ue,"DropErc1155ClaimConditions");var No=require("ethers"),$e=class{constructor(t){this.contractWrapper=t}async getAllClaimerAddresses(t){let e=await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null,No.BigNumber.from(t)));return Array.from(new Set(e.map(r=>r.args.claimer)))}};c($e,"DropErc1155History");var Et=require("ethers");var an=require("@ethersproject/constants");var Bo=v.merge(x).merge(wt).merge(L),cs=P.merge(x).merge(wt).merge(L),ps=Bo.merge(M).merge(nt).merge(k),Mo={deploy:ps,output:cs,input:Bo};var Lo=v.merge(x).merge(wt).merge(L),ds=P.merge(x).merge(wt).merge(L),ms=Lo.merge(M).merge(nt).merge(k),Uo={deploy:ms,output:ds,input:Lo};var $o=v,ls=P,us=$o.merge(M).merge(k),Vo={deploy:us,output:ls,input:$o};var Go=v.merge(x).merge(L),hs=P.merge(x).merge(L),fs=Go.merge(M).merge(k),jo={deploy:fs,output:hs,input:Go};var Kt=require("zod");var Ho=Kt.z.object({address:pt,sharesBps:Ft.gt(0,"Shares must be greater than 0")}),gs=Ho.extend({address:pt,sharesBps:Ft}),_a=v.extend({recipients:Kt.z.array(Ho).default([]).superRefine((o,t)=>{let e={},r=0;for(let a=0;a<o.length;a++){let n=o[a];e[n.address]&&t.addIssue({code:Kt.z.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),e[n.address]=!0,r+=n.sharesBps,r>1e4&&t.addIssue({code:Kt.z.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}r!==1e4&&t.addIssue({code:Kt.z.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${r/100}%`,path:[]})})}),ys=P.extend({recipients:Kt.z.array(gs)}),ws=_a.merge(M).merge(_a).merge(k),zo={deploy:ws,output:ys,input:_a};var Zo=v.merge(L),Cs=P.merge(L),Ss=Zo.merge(M).merge(nt).merge(k),qo={deploy:Ss,output:Cs,input:Zo};var Ko=v.merge(x).merge(L),Ts=P.merge(x).merge(L),bs=Ko.merge(M).merge(nt).merge(k),Jo={deploy:bs,output:Ts,input:Ko};var Qo=v.merge(x),Ws=P.merge(x),As=Qo.merge(M).merge(nt).merge(k),Yo={deploy:As,output:Ws,input:Qo};var at=require("zod"),Xo=at.z.object({voting_delay_in_blocks:at.z.number().min(0).default(0),voting_period_in_blocks:at.z.number().min(1).default(1),voting_token_address:pt,voting_quorum_fraction:ro.default(0),proposal_token_threshold:ct.default(1)}),vs=Xo.extend({proposal_token_threshold:T}),tn=v.merge(Xo),xs=P.merge(vs),Es=tn.merge(k),en={deploy:Es,output:xs,input:tn},Qc=at.z.object({proposalId:T,proposer:at.z.string(),targets:at.z.array(at.z.string()),values:at.z.array(T),signatures:at.z.array(at.z.string()),calldatas:at.z.array(at.z.string()),startBlock:T,endBlock:T,description:at.z.string()});var Ve=require("zod");var Fr=Ve.z.object({supply:T,metadata:wr}),Ps=Fr.extend({owner:Ve.z.string(),quantityOwned:T}),ks=Ve.z.object({supply:ct,metadata:ot}),Rs=Ve.z.object({supply:ct,metadata:yr});var rn=require("zod");var Fs=rn.z.object({toAddress:pt,amount:N});var Ge=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=dt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=dt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await Bt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,e){return await this.getValue(await this.contractWrapper.readContract.allowance(t,e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),an.AddressZero)}async transfer(t,e){let r=Et.ethers.utils.parseUnits(N.parse(e),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,r])}}async transferFrom(t,e,r){let a=Et.ethers.utils.parseUnits(N.parse(r),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,e,a])}}async setAllowance(t,e){let r=Et.ethers.utils.parseUnits(N.parse(e),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("approve",[t,r])}}async transferBatch(t){let e=await this.contractWrapper.readContract.decimals(),r=t.map(a=>{let n=Et.ethers.utils.parseUnits(N.parse(a.amount),e);return this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[a.toAddress,n])});await this.contractWrapper.multiCall(r)}async burn(t){let e=Et.ethers.utils.parseUnits(N.parse(t),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burn",[e])}}async burnFrom(t,e){let r=Et.ethers.utils.parseUnits(N.parse(e),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,r])}}async getValue(t){return await U(this.contractWrapper.getProvider(),this.getAddress(),Et.BigNumber.from(t))}};c(Ge,"Erc20");var Da=require("ethers"),Oa=require("@ethersproject/constants");var je=class{constructor(t){this.contractWrapper=t}async getAllHolderBalances(){let e=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map(a=>a.args),r={};return e.forEach(a=>{let n=a.from,s=a.to,i=a.value;n!==Oa.AddressZero&&(n in r||(r[n]=Da.BigNumber.from(0)),r[n]=r[n].sub(i)),s!==Oa.AddressZero&&(s in r||(r[s]=Da.BigNumber.from(0)),r[s]=r[s].add(i))}),Promise.all(Object.keys(r).map(async a=>({holder:a,balance:await U(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,r[a])})))}};c(je,"TokenERC20History");var Na=require("ethers"),Ba=require("@ethersproject/constants");var ye=100;var on=require("ethers");var we=require("@thirdweb-dev/contracts");async function Jt(o,t,e){let r=await e.get(t);return wr.parse(S({id:on.BigNumber.from(o),uri:t},r))}c(Jt,"fetchTokenMetadata");async function Mt(o,t,e,r){let a,n=we.ERC165__factory.connect(o,t),s=await n.supportsInterface(Ot),i=await n.supportsInterface(Nt);if(s)a=await we.TokenERC721__factory.connect(o,t).tokenURI(e);else if(i)a=await we.TokenERC1155__factory.connect(o,t).uri(e);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new lt;return Jt(e,a,r)}c(Mt,"fetchTokenMetadataForContract");async function Ir(o,t){return typeof o=="string"?o:await t.uploadMetadata(ot.parse(o))}c(Ir,"uploadOrExtractURI");async function Lt(o,t){if(Is(o))return o;if(_s(o)){let{metadataUris:e}=await t.uploadMetadataBatch(o.map(r=>ot.parse(r)));return e}else throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}c(Lt,"uploadOrExtractURIs");function Is(o){return o.find(t=>typeof t!="string")===void 0}c(Is,"isUriList");function _s(o){return o.find(t=>typeof t!="object")===void 0}c(_s,"isMetadataList");var Qt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=dt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=dt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.ownerOf(t).catch(()=>Ba.AddressZero),this.getTokenMetadata(t)]);return{owner:e,metadata:r}}async getAll(t){let e=Na.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=Na.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.balanceOf(e),a=Array.from(Array(r.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(e,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),Ba.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[r,t,e])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);if(!e)throw new lt;return Jt(t,e,this.storage)}};c(Qt,"Erc721");var _r=require("ethers");var nn=require("@ethersproject/constants");var Ma;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(Ma||(Ma={}));var Yt=class{constructor(t,e,r={}){this.contractWrapper=t,this.storage=e;try{this.options=dt.parse(r)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=dt.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>_r.BigNumber.from(0)),this.getTokenMetadata(t)]);return Fr.parse({supply:e,metadata:r})}async getAll(t){let e=_r.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=_r.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),e+r);return await Promise.all([...Array(a-e).keys()].map(n=>this.get((e+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return _(S({},i),{owner:e,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),nn.AddressZero)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async transfer(t,e,r,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,e,r,a])}}async burn(t,e){let r=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[r,t,e])}}async setApprovalForAll(t,e){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async getTokenMetadata(t){let e=await this.contractWrapper.readContract.uri(t);if(!e)throw new lt;return Jt(t,e,this.storage)}};c(Yt,"Erc1155");var He=require("ethers"),sn=X(require("tiny-invariant")),ze=class{constructor(t,e){this.contractWrapper=t,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();return await ft(this.contractWrapper,He.BigNumber.from(a.price),e.currencyAddress,n),{receipt:await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n)}}async mintBatch(t){let r=(await Promise.all(t.map(async a=>{let n=await this.mapPayloadToContractStruct(a.payload),s=a.signature,i=a.payload.price;if(He.BigNumber.from(i).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:n,signature:s}}))).map(a=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[a.message,a.signature]));return{receipt:await this.contractWrapper.multiCall(r)}}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(s=>Sr.parse(s)),r=await this.contractWrapper.getChainID(),a=this.contractWrapper.getSigner();(0,sn.default)(a,"No signer available");let n=await this.contractWrapper.readContract.name();return await Promise.all(e.map(async s=>{let i=ya.parse(s),p=await this.contractWrapper.signTypedData(a,{name:n,version:"1",chainId:r,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Sa},await this.mapPayloadToContractStruct(i));return{payload:i,signature:p.toString()}}))}async mapPayloadToContractStruct(t){let e=await et(this.contractWrapper.getProvider(),t.price,t.currencyAddress),r=He.ethers.utils.parseUnits(t.quantity,await this.contractWrapper.readContract.decimals());return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:r,price:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid}}};c(ze,"Erc20SignatureMinting");var La=require("ethers"),cn=X(require("tiny-invariant"));var Ze=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await ft(this.contractWrapper,La.BigNumber.from(a.price),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,d=s.payload.price;if(La.BigNumber.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>_e.parse(i)),r=e.map(i=>i.metadata),a=await Lt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,cn.default)(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let d=a[p],m=Tr.parse(_(S({},i),{uri:d})),u=await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:Ta},await this.mapPayloadToContractStruct(m));return{payload:m,signature:u.toString()}}))}async mapPayloadToContractStruct(t){let e=await et(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:e,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(Ze,"Erc721SignatureMinting");var pn=X(require("tiny-invariant")),dn=require("ethers");var qe=class{constructor(t,e,r){this.contractWrapper=t,this.storage=r,this.roles=e}async mint(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e),n=await this.contractWrapper.getCallOverrides();await ft(this.contractWrapper,a.pricePerToken.mul(a.quantity),e.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,r],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let r=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),p=s.signature,d=s.payload.price;if(dn.BigNumber.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:p}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(r),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let e=t.payload,r=t.signature,a=await this.mapPayloadToContractStruct(e);return(await this.contractWrapper.readContract.verify(a,r))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let e=t.map(i=>wa.parse(i)),r=e.map(i=>i.metadata),a=await Lt(r,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,pn.default)(s,"No signer available"),await Promise.all(e.map(async(i,p)=>{let d=a[p],m=Ca.parse(_(S({},i),{uri:d})),u=await this.contractWrapper.signTypedData(s,{name:"TokenERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:ba},await this.mapPayloadToContractStruct(m));return{payload:m,signature:u.toString()}}))}async mapPayloadToContractStruct(t){let e=await et(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:e,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};c(qe,"Erc1155SignatureMinting");var Ce=require("@thirdweb-dev/contracts"),At=require("ethers"),Ua=require("@ethersproject/constants");var Dr=require("ethers"),Pt=require("@thirdweb-dev/contracts");var Ut=X(require("tiny-invariant"));async function mn(o,t,e,r,a){try{let n=Pt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Ot),i=await n.supportsInterface(Nt);if(s){let p=Pt.IERC721__factory.connect(e,o);return await p.isApprovedForAll(a,t)?!0:(await p.getApproved(r)).toLowerCase()===t.toLowerCase()}else return i?await Pt.IERC1155__factory.connect(e,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}c(mn,"isTokenApprovedForMarketplace");async function Or(o,t,e,r,a){let n=Pt.ERC165__factory.connect(e,o),s=await n.supportsInterface(Ot),i=await n.supportsInterface(Nt);if(s){let p=new w(o,e,Pt.IERC721__factory.abi,{});await p.readContract.isApprovedForAll(a,t)||(await p.readContract.getApproved(r)).toLowerCase()===t.toLowerCase()||await p.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let p=new w(o,e,Pt.IERC1155__factory.abi,{});await p.readContract.isApprovedForAll(a,t)||await p.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}c(Or,"handleTokenApproval");function Nr(o){switch((0,Ut.default)(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),(0,Ut.default)(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),(0,Ut.default)(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),(0,Ut.default)(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),(0,Ut.default)(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),(0,Ut.default)(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":(0,Ut.default)(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}c(Nr,"validateNewListingParam");async function Br(o,t,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await U(o,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:t}}c(Br,"mapOffer");function ln(o,t,e){return e=Dr.BigNumber.from(e),o=Dr.BigNumber.from(o),t=Dr.BigNumber.from(t),t.sub(o).mul(pa).div(o).gte(e)}c(ln,"isWinningBid");var un=X(require("tiny-invariant")),hn=require("ethers/lib/utils"),Ke=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===Ua.AddressZero)throw new yt(this.getAddress(),t.toString());if(e.listingType!==$.Direct)throw new Gt(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(e)}async getActiveOffer(t,e){await this.validateListing(At.BigNumber.from(t)),(0,un.default)((0,hn.isAddress)(e),"Address must be a valid address");let r=await this.contractWrapper.readContract.offers(t,e);if(r.offeror!==Ua.AddressZero)return await Br(this.contractWrapper.getProvider(),At.BigNumber.from(t),r)}async createListing(t){Nr(t),await Or(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await et(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:$.Direct,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",r==null?void 0:r.logs)[0].args.listingId,receipt:r}}async makeOffer(t,e,r,a){if(Wt(r))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await et(this.contractWrapper.getProvider(),a,r);try{await this.getListing(t)}catch(d){throw console.error("Failed to get listing, err =",d),new Error(`Error getting the listing with id ${t}`)}let s=At.BigNumber.from(e),i=At.BigNumber.from(n).mul(s),p=await this.contractWrapper.getCallOverrides()||{};return await ft(this.contractWrapper,i,r,p),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e,r,n],p)}}async acceptOffer(t,e){await this.validateListing(At.BigNumber.from(t));let r=await this.contractWrapper.readContract.offers(t,e);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,e,r.currency,r.pricePerToken])}}async buyoutListing(t,e,r){let a=await this.validateListing(At.BigNumber.from(t));if(!await this.isStillValidListing(a,e))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=r||await this.contractWrapper.getSignerAddress(),i=At.BigNumber.from(e),p=At.BigNumber.from(a.buyoutPrice).mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await ft(this.contractWrapper,p,a.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,p],d)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:At.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await U(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Mt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:$.Direct}}async isStillValidListing(t,e){if(!await mn(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=Ce.ERC165__factory.connect(t.assetContractAddress,a),s=await n.supportsInterface(Ot),i=await n.supportsInterface(Nt);return s?(await Ce.IERC721__factory.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await Ce.IERC1155__factory.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(e||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};c(Ke,"MarketplaceDirect");var q=require("ethers");var $a=require("@ethersproject/constants");var Va=X(require("tiny-invariant")),Je=class{constructor(t,e){this.contractWrapper=t,this.storage=e}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());if(e.listingType!==$.Auction)throw new Gt(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(e)}async getWinningBid(t){await this.validateListing(q.BigNumber.from(t));let e=await this.contractWrapper.readContract.winningBid(t);if(e.offeror!==$a.AddressZero)return await Br(this.contractWrapper.getProvider(),q.BigNumber.from(t),e)}async getWinner(t){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(q.BigNumber.from(t)));if(!r)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return r.args.winningBidder}async createListing(t){Nr(t),await Or(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let e=await et(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),r=await et(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:e,currencyToAccept:t.currencyContractAddress,listingType:$.Auction,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let e=await this.validateListing(q.BigNumber.from(t)),r=await Bt(this.contractWrapper.getProvider(),e.currencyContractAddress);return this.makeBid(t,q.ethers.utils.formatUnits(e.buyoutPrice,r.decimals))}async makeBid(t,e){let r=await this.validateListing(q.BigNumber.from(t)),a=await et(this.contractWrapper.getProvider(),e,r.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let m=ln(s.pricePerToken,a,n);(0,Va.default)(m,"Bid price is too low based on the current winning bid and the bid buffer")}else{let m=a,u=q.BigNumber.from(r.reservePrice);(0,Va.default)(m.gte(u),"Bid price is too low based on reserve price")}let i=q.BigNumber.from(r.quantity),p=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await ft(this.contractWrapper,p,r.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r.quantity,r.currencyContractAddress,a],d)}}async cancelListing(t){let e=await this.validateListing(q.BigNumber.from(t)),r=q.BigNumber.from(Math.floor(Date.now()/1e3)),a=q.BigNumber.from(e.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(r.gt(a)&&n.offeror!==$a.AddressZero)throw new ke(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[q.BigNumber.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,e){e||(e=await this.contractWrapper.getSignerAddress());let r=await this.validateListing(q.BigNumber.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[q.BigNumber.from(t),e])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new Re(t.toString(),r.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(e){throw console.error(`Error getting the listing with id ${t}`),e}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:q.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await U(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Mt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await U(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:q.BigNumber.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:$.Auction}}};c(Je,"MarketplaceAuction");var fn=require("@thirdweb-dev/contracts");var gn=require("ethers/lib/utils"),yn=require("@ethersproject/constants"),Mr=class extends w{constructor(t,e,r){super(e,t,fn.TWRegistry__factory.abi,r)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(e=>(0,gn.isAddress)(e)&&e.toLowerCase()!==yn.AddressZero)}};c(Mr,"ContractRegistry");var Pn=require("@thirdweb-dev/contracts"),pr=require("ethers");var wn=require("@thirdweb-dev/contracts");var R=class{constructor(t){this.contractWrapper=t}addListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.on(r.name,(...a)=>{let n={};r.inputs.map(s=>s.name).forEach((s,i)=>{n[s]=a[i]}),e(n)})}removeListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(r.name,e)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners()}};c(R,"ContractEvents");var Qe=class extends Qt{constructor(t,e,r,a={},n=new w(t,e,Qe.contractFactory.abi,a)){super(n,r,a);this.metadata=new W(this.contractWrapper,Qe.schema,this.storage),this.roles=new O(this.contractWrapper,Qe.contractRoles),this.royalty=new tt(this.contractWrapper,this.metadata),this.primarySale=new st(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.signature=new Ze(this.contractWrapper,this.roles,this.storage),this.events=new R(this.contractWrapper)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await Ir(e,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,r]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let a=(await Lt(e,this.storage)).map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<e.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let p=i.args.tokenIdMinted;return{id:p,receipt:n,data:()=>this.get(p)}})}},K=Qe;c(K,"NFTCollection"),f(K,"contractType","nft-collection"),f(K,"contractRoles",["admin","minter","transfer"]),f(K,"contractFactory",wn.TokenERC721__factory),f(K,"schema",Jo);var Cn=require("@thirdweb-dev/contracts");var Lr=require("ethers/lib/utils");var Ga=require("ethers"),F=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){let r=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,e);return Ga.ethers.utils.formatEther(a.mul(r))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Ga.ethers.utils.formatUnits(t,"gwei")}};c(F,"GasCostEstimator");var Xt=class{constructor(t){this.contractWrapper=t}overrideNextTransaction(t){this.contractWrapper.withTransactionOverride(t)}};c(Xt,"ContractInterceptor");var Ye=class extends Yt{constructor(t,e,r,a={},n=new w(t,e,Ye.contractFactory.abi,a)){super(n,r,a);this.metadata=new W(this.contractWrapper,Ye.schema,this.storage),this.roles=new O(this.contractWrapper,Ye.contractRoles),this.royalty=new tt(this.contractWrapper,this.metadata),this.primarySale=new st(this.contractWrapper),this.claimConditions=new Ue(this.contractWrapper,this.metadata,this.storage),this.history=new $e(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.events=new R(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.interceptor=new Xt(this.contractWrapper)}async createBatch(t){var d;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(m=>ot.parse(m)),e.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,`${r.baseUri.endsWith("/")?r.baseUri:`${r.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,p=[];for(let m=s;m.lte(i);m=m.add(1))p.push({id:m,receipt:a,data:()=>this.getTokenMetadata(m)});return p}async claimTo(t,e,r,a=[(0,Lr.hexZeroPad)([0],32)]){let n=await this.prepareClaim(e,r,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,e,r,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,e,r=[(0,Lr.hexZeroPad)([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,e,r)}async prepareClaim(t,e,r=[(0,Lr.hexZeroPad)([0],32)]){return Er(e,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},I=Ye;c(I,"EditionDrop"),f(I,"contractType","edition-drop"),f(I,"contractRoles",["admin","minter","transfer"]),f(I,"contractFactory",Cn.DropERC1155__factory),f(I,"schema",Uo);var Sn=require("@thirdweb-dev/contracts");var tr=require("ethers");var Xe=class extends Yt{constructor(t,e,r,a={},n=new w(t,e,Xe.contractFactory.abi,a)){super(n,r,a);this.metadata=new W(this.contractWrapper,Xe.schema,this.storage),this.roles=new O(this.contractWrapper,Xe.contractRoles),this.royalty=new tt(this.contractWrapper,this.metadata),this.primarySale=new st(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper),this.signature=new qe(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=await Ir(e.metadata,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,tr.ethers.constants.MaxUint256,r,e.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,e){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,e)}async mintAdditionalSupplyTo(t,e,r){let a=await this.getTokenMetadata(e),n=await this.contractWrapper.sendTransaction("mintTo",[t,e,a.uri,r]);return{id:tr.BigNumber.from(e),receipt:n,data:()=>this.get(e)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,e){let r=e.map(d=>d.metadata),a=e.map(d=>d.supply),s=(await Lt(r,this.storage)).map((d,m)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,tr.ethers.constants.MaxUint256,d,a[m]])),i=await this.contractWrapper.multiCall(s),p=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(p.length===0||p.length<r.length)throw new Error("TokenMinted event not found, minting failed");return p.map(d=>{let m=d.args.tokenIdMinted;return{id:m,receipt:i,data:()=>this.get(m)}})}},J=Xe;c(J,"Edition"),f(J,"contractType","edition"),f(J,"contractRoles",["admin","minter","transfer"]),f(J,"contractFactory",Sn.TokenERC1155__factory),f(J,"schema",Yo);var Tn=require("@thirdweb-dev/contracts");var ja=require("ethers");var er=class extends Ge{constructor(t,e,r,a={},n=new w(t,e,er.contractFactory.abi,a)){super(n,r,a);this.metadata=new W(this.contractWrapper,er.schema,this.storage),this.roles=new O(this.contractWrapper,er.contractRoles),this.history=new je(this.contractWrapper),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper),this.signature=new ze(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,e){let r=ja.ethers.utils.parseUnits(N.parse(e),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,r])}}async mintBatchTo(t){let e=[];for(let r of t){let a=ja.ethers.utils.parseUnits(N.parse(r.amount),await this.contractWrapper.readContract.decimals());e.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[r.toAddress,a]))}return{receipt:await this.contractWrapper.multiCall(e)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},V=er;c(V,"Token"),f(V,"contractType","token"),f(V,"contractRoles",["admin","minter","transfer"]),f(V,"contractFactory",Tn.TokenERC20__factory),f(V,"schema",qo);var $r=require("@thirdweb-dev/contracts");var te=require("ethers");var bn=X(require("deep-equal"));var Ur=class{constructor(t,e,r,a={},n=new w(t,e,Ur.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new W(this.contractWrapper,Ur.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let r=(await this.getAll()).filter(a=>(0,bn.default)(te.BigNumber.from(a.proposalId),te.BigNumber.from(t)));if(r.length===0)throw new Error("proposal not found");return r[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((e,r)=>({toAddress:t.targets[r],nativeTokenValue:e,transactionData:t.calldatas[r]}))})))}async getProposalVotes(t){let e=await this.contractWrapper.readContract.proposalVotes(t);return[{type:Zt.Against,label:"Against",count:e.againstVotes},{type:Zt.For,label:"For",count:e.forVotes},{type:Zt.Abstain,label:"Abstain",count:e.abstainVotes}]}async hasVoted(t,e){return e||(e=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,e)}async canExecute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=te.ethers.utils.id(e.description);try{return await this.contractWrapper.callStatic().execute(r,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:te.ethers.utils.formatUnits(t,18)}}async balanceOfToken(t){let e=$r.IERC20__factory.connect(t,this.contractWrapper.getProvider());return await U(this.contractWrapper.getProvider(),t,await e.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,e,r,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await Bt(this.contractWrapper.getProvider(),r);return{votingDelay:t.toString(),votingPeriod:e.toString(),votingTokenAddress:r,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,e){e||(e=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let r=e.map(p=>p.toAddress),a=e.map(p=>p.nativeTokenValue),n=e.map(p=>p.transactionData),s=await this.contractWrapper.sendTransaction("propose",[r,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,e,r=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,e,r])}}async execute(t){await this.ensureExists(t);let e=await this.get(t),r=e.executions.map(i=>i.toAddress),a=e.executions.map(i=>i.nativeTokenValue),n=e.executions.map(i=>i.transactionData),s=te.ethers.utils.id(e.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[r,a,n,s])}}},Q=Ur;c(Q,"Vote"),f(Q,"contractType","vote"),f(Q,"contractFactory",$r.VoteERC20__factory),f(Q,"schema",en);var Gr=require("@thirdweb-dev/contracts");var Ha=require("ethers");var Vr=class{constructor(t,e,r,a={},n=new w(t,e,Vr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new W(this.contractWrapper,Vr.schema,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],e=Ha.BigNumber.from(0),r=await this.contractWrapper.readContract.payeeCount();for(;e.lt(r);)try{let a=await this.contractWrapper.readContract.payee(e);t.push(await this.getRecipientSplitPercentage(a)),e=e.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),e={};for(let r of t)e[r.address]=await this.balanceOf(r.address);return e}async balanceOfTokenAllRecipients(t){let e=await this.getAllRecipients(),r={};for(let a of e)r[a.address]=await this.balanceOfToken(a.address,t);return r}async balanceOf(t){let e=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),r=await this.contractWrapper.readContract["totalReleased()"](),a=e.add(r);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,e){let a=await Gr.IERC20__factory.connect(e,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](e),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](e,t));return await U(this.contractWrapper.getProvider(),e,i)}async getRecipientSplitPercentage(t){let[e,r]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:r.mul(Ha.BigNumber.from(1e7)).div(e).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,e){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[e,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,e,r){return e.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(r)}},Y=Vr;c(Y,"Split"),f(Y,"contractType","split"),f(Y,"contractFactory",Gr.Split__factory),f(Y,"schema",zo);var Wn=require("@thirdweb-dev/contracts");var ee=require("ethers"),An=X(require("tiny-invariant"));var Se=require("@ethersproject/constants");var rr=class{constructor(t,e,r,a={},n=new w(t,e,rr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new W(this.contractWrapper,rr.schema,this.storage),this.roles=new O(this.contractWrapper,rr.contractRoles),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.direct=new Ke(this.contractWrapper,this.storage),this.auction=new Je(this.contractWrapper,this.storage),this.events=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let e=await this.contractWrapper.readContract.listings(t);if(e.assetContract===Se.AddressZero)throw new yt(this.getAddress(),t.toString());switch(e.listingType){case $.Auction:return await this.auction.mapListing(e);case $.Direct:return await this.direct.mapListing(e);default:throw new Error(`Unknown listing type: ${e.listingType}`)}}async getActiveListings(){return(await this.getAllListingsNoFilter()).filter(e=>e.type===$.Auction&&ee.BigNumber.from(e.endTimeInEpochSeconds).gt(ee.BigNumber.from(Math.floor(Date.now()/1e3)))||e.type===$.Direct&&e.quantity>0)}async getAllListings(t){let e=ee.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=ee.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=await this.getAllListingsNoFilter();return t&&(t.seller&&(a=a.filter(n=>{var s;return n.sellerAddress.toString().toLowerCase()===((s=t==null?void 0:t.seller)==null?void 0:s.toString().toLowerCase())})),t.tokenContract&&(t.tokenId?a=a.filter(n=>{var s,i;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())&&n.tokenId.toString()===((i=t==null?void 0:t.tokenId)==null?void 0:i.toString())}):a=a.filter(n=>{var s;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())})),a=a.filter((n,s)=>s>=e),a=a.slice(0,r)),a.filter(n=>n!==void 0)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(D("lister"),Se.AddressZero)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,e,r){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());switch(a.listingType){case $.Direct:return(0,An.default)(e!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,e,r);case $.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[e,ee.BigNumber.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let e=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[ee.BigNumber.from(t),e])}async allowListingFromSpecificAssetOnly(t){let e=[];(await this.roles.get("asset")).includes(Se.AddressZero)&&e.push(this.encoder.encode("revokeRole",[D("asset"),Se.AddressZero])),e.push(this.encoder.encode("grantRole",[D("asset"),t])),await this.contractWrapper.multiCall(e)}async allowListingFromAnyAsset(){let t=[],e=await this.roles.get("asset");for(let r in e)t.push(this.encoder.encode("revokeRole",[D("asset"),r]));t.push(this.encoder.encode("grantRole",[D("asset"),Se.AddressZero])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async e=>{let r;try{r=await this.getListing(e)}catch{return}if(r.type===$.Auction)return r;if(!!await this.direct.isStillValidListing(r))return r}))).filter(e=>e!==void 0)}},G=rr;c(G,"Marketplace"),f(G,"contractType","marketplace"),f(G,"contractRoles",["admin","lister","asset"]),f(G,"contractFactory",Wn.Marketplace__factory),f(G,"schema",Vo);var re=require("@thirdweb-dev/contracts");var or=require("ethers");var ar=class{constructor(t,e,r,a={},n=new w(t,e,ar.contractFactory.abi,a)){this.contractWrapper=n,this.storage=r,this.metadata=new W(this.contractWrapper,ar.schema,this.storage),this.roles=new O(this.contractWrapper,ar.contractRoles),this.royalty=new tt(this.contractWrapper,this.metadata),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[e,r,a]=await Promise.all([Mt(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>or.BigNumber.from("0"))]);return{id:or.BigNumber.from(t).toString(),metadata:e,creator:r.creator,currentSupply:a,openStart:r.openStart.gt(0)?new Date(r.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(e=>this.get(e.toString())))}async getNFTs(t){let e=await this.contractWrapper.readContract.getPackWithRewards(t);if(!e.source)throw new lt;return(await Promise.all(e.tokenIds.map(a=>Mt(e.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:e.amountsPacked[n],metadata:a}))}async balanceOf(t,e){return await this.contractWrapper.readContract.balanceOf(t,e)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,e){return await this.contractWrapper.readContract.isApprovedForAll(t,e)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),e=he[t],r=re.IERC20__factory.connect(e.linkTokenAddress,this.contractWrapper.getProvider());return await U(this.contractWrapper.getProvider(),e.linkTokenAddress,await r.balanceOf(this.getAddress()))}async getOwned(t){let e=t||await this.contractWrapper.getSignerAddress(),r=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(r.toNumber()).fill(e),Array.from(Array(r.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let p=await this.get(s.toString());return _(S({},p),{ownedByAddress:i})}))}async open(t){let e=await this.contractWrapper.sendTransaction("openPack",[t]),r=this.contractWrapper.parseLogs("PackOpenRequested",e==null?void 0:e.logs);if(r.length===0)throw new Error("Failed to open pack");let a=r[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(m=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(u,g,y,z,gt)=>{n===y&&m({packId:u,opener:g,requestId:n,rewardContract:z,rewardIds:gt})})}),{rewardIds:p,rewardContract:d}=i;return p.map(m=>({id:t,receipt:e,data:()=>Mt(d,this.contractWrapper.getProvider(),m.toString(),this.storage)}))}async create(t){let e=re.IERC1155__factory.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),r=await this.contractWrapper.getSignerAddress(),a=t.assets.map(g=>g.tokenId),n=t.assets.map(g=>g.amount),s=await this.storage.uploadMetadata(t.metadata),i=or.ethers.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),d=await(await e.safeBatchTransferFrom(r,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),m=this.contractWrapper.parseLogs("PackAdded",d.logs);if(m.length===0)throw new Error("PackCreated event not found");let u=m[0].args.packId;return{id:u,receipt:d,data:()=>this.get(u.toString())}}async transfer(t,e,r){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,e,r,[0]])}}async transferFrom(t,e,r,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,e,r.tokenId,r.amount,a])}}async transferBatchFrom(t,e,r,a=[0]){let n=r.map(i=>i.tokenId),s=r.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,e,n,s,a])}}async setApproval(t,e=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,e])}}async depositLink(t){let e=await this.contractWrapper.getChainID(),r=he[e];return{receipt:await(await re.IERC20__factory.connect(r.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},j=ar;c(j,"Pack"),f(j,"contractType","pack"),f(j,"contractRoles",["admin","minter","pauser","transfer"]),f(j,"contractFactory",re.Pack__factory),f(j,"schema",jo);var vn=require("@thirdweb-dev/contracts"),jr=require("@ethersproject/bytes"),$t=require("ethers");var Te=require("ethers");var nr=class{constructor(t,e){this.contractWrapper=t,this.storage=e}async createDelayedRevealBatch(t,e,r){var gt,mt;if(!r)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([ot.parse(t)],0,this.contractWrapper.readContract.address,await((gt=this.contractWrapper.getSigner())==null?void 0:gt.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(e.map(it=>ot.parse(it)),n.toNumber(),this.contractWrapper.readContract.address,await((mt=this.contractWrapper.getSigner())==null?void 0:mt.getAddress())),i=s.baseUri,p=await this.contractWrapper.readContract.getBaseURICount(),d=await this.contractWrapper.readContract.encryptDecrypt(Te.ethers.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(p,r)),m=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,d]),u=this.contractWrapper.parseLogs("TokensLazyMinted",m==null?void 0:m.logs),g=u[0].args.startTokenId,y=u[0].args.endTokenId,z=[];for(let it=g;it.lte(y);it=it.add(1))z.push({id:it,receipt:m});return z}async reveal(t,e){if(!e)throw new Error("Password is required");let r=await this.hashDelayRevealPasword(t,e);try{let a=await this.contractWrapper.callStatic().reveal(t,r);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,r])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let e=Array.from(Array(t.toNumber()).keys()),r=await Promise.all(e.map(p=>this.contractWrapper.readContract.baseURIIndices(p))),a=r.slice(0,r.length-1),n=await Promise.all(Array.from([0,...a]).map(p=>this.contractWrapper.readContract.tokenURI(p))),s=await Promise.all(Array.from([0,...a]).map(p=>this.getNftMetadata(p.toString()))),i=await Promise.all(Array.from([...r]).map(p=>this.contractWrapper.readContract.encryptedBaseURI(p)));return n.map((p,d)=>({batchId:Te.BigNumber.from(d),batchUri:p,placeholderMetadata:s[d]})).filter((p,d)=>Te.ethers.utils.hexDataLength(i[d])>0)}async hashDelayRevealPasword(t,e){let r=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Te.ethers.utils.solidityKeccak256(["string","uint256","uint256","address"],[e,r,t,a])}async getNftMetadata(t){let e=await this.contractWrapper.readContract.tokenURI(t);return Jt(t,e,this.storage)}};c(nr,"DelayedReveal");var sr=class extends Qt{constructor(t,e,r,a={},n=new w(t,e,sr.contractFactory.abi,a)){super(n,r,a);this.metadata=new W(this.contractWrapper,sr.schema,this.storage),this.roles=new O(this.contractWrapper,sr.contractRoles),this.royalty=new tt(this.contractWrapper,this.metadata),this.primarySale=new st(this.contractWrapper),this.claimConditions=new Me(this.contractWrapper,this.metadata,this.storage),this.encoder=new E(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.events=new R(this.contractWrapper),this.revealer=new nr(this.contractWrapper,this.storage),this.interceptor=new Xt(this.contractWrapper)}async getAllClaimed(t){let e=$t.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=$t.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),e+r);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let e=$t.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),r=$t.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=$t.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),e+r)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var m;let e=await this.contractWrapper.readContract.nextTokenIdToMint(),r=await this.storage.uploadMetadataBatch(t.map(u=>ot.parse(u)),e.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=r.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[r.metadataUris.length,a.endsWith("/")?a:`${a}/`,$t.ethers.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,p=s[0].args.endTokenId,d=[];for(let u=i;u.lte(p);u=u.add(1))d.push({id:u,receipt:n,data:()=>this.getTokenMetadata(u)});return d}async claimTo(t,e,r=[(0,jr.hexZeroPad)([0],32)]){let a=await this.prepareClaim(e,r),n=await this.contractWrapper.sendTransaction("claim",[t,e,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,p=i.add(e),d=[];for(let m=i;m.lt(p);m=m.add(1))d.push({id:m,receipt:n,data:()=>this.get(m)});return d}async claim(t,e=[(0,jr.hexZeroPad)([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,e)}async prepareClaim(t,e=[(0,jr.hexZeroPad)([0],32)]){return Er(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},H=sr;c(H,"NFTDrop"),f(H,"contractType","nft-drop"),f(H,"contractRoles",["admin","minter","transfer"]),f(H,"contractFactory",vn.DropERC721__factory),f(H,"schema",Mo);var ir={[H.contractType]:H,[K.contractType]:K,[I.contractType]:I,[J.contractType]:J,[V.contractType]:V,[Q.contractType]:Q,[Y.contractType]:Y,[G.contractType]:G,[j.contractType]:j},za={[H.contractType]:"DropERC721",[K.contractType]:"TokenERC721",[I.contractType]:"DropERC1155",[J.contractType]:"TokenERC1155",[V.contractType]:"TokenERC20",[Q.contractType]:"VoteERC20",[Y.contractType]:"Split",[G.contractType]:"Marketplace",[j.contractType]:"Pack"},Hr={DropERC721:H.contractType,TokenERC721:K.contractType,DropERC1155:I.contractType,TokenERC1155:J.contractType,TokenERC20:V.contractType,VoteERC20:Q.contractType,Split:Y.contractType,Marketplace:G.contractType,Pack:j.contractType};var Vt=require("@thirdweb-dev/contracts");var xn=v.merge(x.merge(wt).merge(L).partial()),Ds=P.merge(x.merge(wt).merge(L).partial()),Os=xn.merge(M.merge(nt).merge(k).partial()),En={deploy:Os,output:Ds,input:xn};function cr(o,t){return Ns(o.readContract,t)}c(cr,"implementsInterface");function Ns(o,t){let e=o.interface.functions,r=t.functions;return Object.keys(e).filter(a=>a in r).length===Object.keys(r).length}c(Ns,"matchesInterface");var zr=class{constructor(t,e,r,a,n={},s=new w(t,e,r,n)){this.storage=a,this.contractWrapper=s,this.metadata=this.detectMetadata(),this.royalties=this.detectRoyalties(),this.roles=this.detectRoles(),this.sales=this.detectPrimarySales()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}detectMetadata(){if(cr(this.contractWrapper,Vt.IThirdwebContract__factory.createInterface()))return new W(this.contractWrapper,zr.schema,this.storage)}detectRoyalties(){if(cr(this.contractWrapper,Vt.IThirdwebRoyalty__factory.createInterface())){let t=new W(this.contractWrapper,zr.schema,this.storage);return new tt(this.contractWrapper,t)}}detectRoles(){if(cr(this.contractWrapper,Vt.AccessControlEnumerable__factory.createInterface()))return new O(this.contractWrapper,Yr)}detectPrimarySales(){if(cr(this.contractWrapper,Vt.IThirdwebPrimarySale__factory.createInterface()))return new st(this.contractWrapper)}},ae=zr;c(ae,"CustomContract"),f(ae,"contractType","custom"),f(ae,"schema",En);var Za=require("@ethersproject/constants"),Zr=class extends w{constructor(t,e,r,a){super(e,t,Pn.TWFactory__factory.abi,a);this.storage=r}async deploy(t,e){var g;let r=ir[t],a=r.schema.deploy.parse(e),n=r.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((g=this.getSigner())==null?void 0:g.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),p=za[t];console.log(`Remote contractName : ${p}`);let d=pr.ethers.utils.formatBytes32String(p);console.log(`Deploying ${t} proxy`);let m=await this.sendTransaction("deployProxy",[d,i]);console.log(`${t} proxy deployed successfully`);let u=this.parseLogs("ProxyDeployed",m.logs);if(u.length<1)throw new Error("No ProxyDeployed event found");return u[0].args.proxy}async getDeployArguments(t,e,r){let a=await this.getDefaultTrustedForwarders();switch(e.trusted_forwarders&&e.trusted_forwarders.length>0&&(a=e.trusted_forwarders),t){case H.contractType:case K.contractType:let n=H.schema.deploy.parse(e);return[await this.getSignerAddress(),n.name,n.symbol,r,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case I.contractType:case J.contractType:let s=I.schema.deploy.parse(e);return[await this.getSignerAddress(),s.name,s.symbol,r,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case V.contractType:let i=V.schema.deploy.parse(e);return[await this.getSignerAddress(),i.name,i.symbol,r,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case Q.contractType:let p=Q.schema.deploy.parse(e);return[p.name,r,a,p.voting_token_address,p.voting_delay_in_blocks,p.voting_period_in_blocks,pr.BigNumber.from(p.proposal_token_threshold),p.voting_quorum_fraction];case Y.contractType:let d=Y.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,d.recipients.map(y=>y.address),d.recipients.map(y=>pr.BigNumber.from(y.sharesBps))];case G.contractType:let m=G.schema.deploy.parse(e);return[await this.getSignerAddress(),r,a,m.platform_fee_recipient,m.platform_fee_basis_points];case j.contractType:let u=j.schema.deploy.parse(e),g=he[await this.getChainID()];return[await this.getSignerAddress(),u.name,u.symbol,r,a,u.fee_recipient,u.seller_fee_basis_points,g.fees,g.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),e=da.find(a=>a===t),r=e?br[e].biconomyForwarder:Za.AddressZero;return r!==Za.AddressZero?[pe,r]:[pe]}};c(Zr,"ContractFactory");var dr=class extends Dt{constructor(t,e,r){super(t,e);this.storage=r}async deployNFTCollection(t){return await this.deployContract(K.contractType,t)}async deployNFTDrop(t){return await this.deployContract(H.contractType,t)}async deployEdition(t){return await this.deployContract(J.contractType,t)}async deployEditionDrop(t){let e=I.schema.deploy.parse(t);return await this.deployContract(I.contractType,e)}async deployToken(t){return await this.deployContract(V.contractType,t)}async deployMarketplace(t){return await this.deployContract(G.contractType,t)}async deployPack(t){return await this.deployContract(j.contractType,t)}async deploySplit(t){return await this.deployContract(Y.contractType,t)}async deployVote(t){return await this.deployContract(Q.contractType,t)}async deployContract(t,e){return await(await this.getFactory()).deploy(t,e)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,e=de(t,"twRegistry");return this._registry=Promise.resolve(new Mr(e,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,e=de(t,"twFactory");return this._factory=Promise.resolve(new Zr(e,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,e;(t=this._factory)==null||t.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())}),(e=this._registry)==null||e.then(r=>{r.updateSignerOrProvider(this.getSignerOrProvider())})}};c(dr,"ContractDeployer");var kn=require("ethers");function qa(o,t){let e=Object.keys(o);for(let r in e){let a=o[e[r]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){qa(a,t);continue}!n||(o[e[r]]=`ipfs://${t.splice(0,1)[0]}`)}return o}c(qa,"replaceFilePropertiesWithHashes");function qr(o,t,e){let r=Object.keys(o);for(let a in r){let n=o[r[a]];o[r[a]]=Kr(n,t,e),Array.isArray(n)&&(o[r[a]]=n.map(s=>typeof s=="object"?qr(s,t,e):Kr(s,t,e))),typeof n=="object"&&qr(n,t,e)}return o}c(qr,"replaceHashWithGatewayUrl");function Kr(o,t,e){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,e):o}c(Kr,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=require("form-data"));var mr=class{constructor(t=xa){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,e,r){return`${await this.uploadBatch([t],0,e,r)}0`}async uploadBatch(t,e=0,r,a){let{cid:n}=await this.uploadBatchWithCid(t,e,r,a);return`ipfs://${n}/`}async getUploadToken(t){let e={"X-App-Name":`CONSOLE-TS-SDK-${t}`},r=await fetch(`${Ea}/grant`,{method:"GET",headers:e});if(!r.ok)throw new Ee("Failed to get upload token");return await r.text()}async get(t){let r=await(await this._get(t)).json();return qr(r,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,e,r){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,e,r);return a[0]}async uploadMetadataBatch(t,e,r,a){let n=(await this.batchUploadProperties(t)).map(m=>JSON.stringify(m)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,e,r,a),p=`ipfs://${s}/`,d=i.map(m=>`${p}${m}`);return{baseUri:p,metadataUris:d}}async _get(t){let e=t;t&&(e=Kr(t,"ipfs://",this.gatewayUrl));let r=await fetch(e);if(!r.ok)throw new Error(`Status code (!= 200) =${r.status}`);return r}async batchUploadProperties(t){let e=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(e.length===0)return t;let{cid:r,fileNames:a}=await this.uploadBatchWithCid(e),n=[];for(let i of a)n.push(`${r}/${i}`);return await qa(t,n)}buildFilePropertiesMap(t,e=[]){if(Array.isArray(t))t.forEach(r=>{this.buildFilePropertiesMap(r,e)});else if(t){let r=Object.values(t);for(let a of r)a instanceof File||a instanceof Buffer?e.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,e)}return e}async uploadBatchWithCid(t,e=0,r,a){let n=await this.getUploadToken(r||""),s={name:`CONSOLE-TS-SDK-${r}`,keyvalues:{sdk:"typescript",contractAddress:r,signerAddress:a}},i=new FormData,p=[];t.forEach((u,g)=>{let y="",z=u;if(u instanceof File){let mt="";if(u.name){let it=u.name.lastIndexOf(".");it>-1&&(mt=u.name.substring(it))}y=`${g+e}${mt}`}else u instanceof Buffer||typeof u=="string"?y=`${g+e}`:u&&u.name&&(u==null?void 0:u.data)?(z=u==null?void 0:u.data,y=`${u.name}`):y=`${g+e}`;let gt=`files/${y}`;if(p.indexOf(y)>-1)throw new xe(y);p.push(y),typeof window>"u"?i.append("file",z,{filepath:gt}):i.append("file",new Blob([z]),gt)}),i.append("pinataMetadata",JSON.stringify(s));let d=await fetch(Pa,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),m=await d.json();if(!d.ok)throw console.log(m),new ve("Failed to upload files to IPFS");return{cid:m.IpfsHash,fileNames:p}}};c(mr,"IpfsStorage");var Rn=require("@thirdweb-dev/contracts");var Fn=X(require("tiny-invariant")),Ka=class extends Dt{contractCache=new Map;constructor(t,e={},r=new mr){super(t,e);this.storage=r,this.deployer=new dr(t,e,r)}getNFTDrop(t){return this.getContract(t,H.contractType)}getNFTCollection(t){return this.getContract(t,K.contractType)}getEditionDrop(t){return this.getContract(t,I.contractType)}getEdition(t){return this.getContract(t,J.contractType)}getToken(t){return this.getContract(t,V.contractType)}getVote(t){return this.getContract(t,Q.contractType)}getSplit(t){return this.getContract(t,Y.contractType)}getMarketplace(t){return this.getContract(t,G.contractType)}getPack(t){return this.getContract(t,j.contractType)}getContract(t,e){if(this.contractCache.has(t))return this.contractCache.get(t);let r=new ir[e](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,r),r}async resolveContractType(t){let e=Rn.IThirdwebContract__factory.connect(t,this.getSignerOrProvider()),r=kn.ethers.utils.toUtf8String(await e.contractType()).replace(/\x00/g,"");return(0,Fn.default)(r in Hr,`${r} is not a valid contract type, falling back to custom contract`),Hr[r]}async getContractList(t){let e=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(e.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}async unstable_getCustomContract(t,e){return new ae(this.getSignerOrProvider(),t,e,this.storage,this.options)}};c(Ka,"ThirdwebSDK");0&&(module.exports={ALL_ROLES,AdminRoleMissingError,AssetNotFoundError,AuctionAlreadyStartedError,AuctionHasNotEndedError,BaseSignaturePayloadInput,CONTRACTS_MAP,CONTRACT_ADDRESSES,ChainId,ChainlinkVrf,ClaimConditionInputArray,ClaimConditionInputSchema,ClaimConditionOutputSchema,ClaimEligibility,CommonContractOutputSchema,CommonContractSchema,CommonPlatformFeeSchema,CommonPrimarySaleSchema,CommonRoyaltySchema,CommonSymbolSchema,CommonTrustedForwarderSchema,ContractDeployer,ContractEncoder,ContractEvents,ContractInterceptor,ContractMetadata,ContractPrimarySale,ContractRoles,ContractRoyalty,CurrencySchema,CurrencyValueSchema,CustomContract,DEFAULT_IPFS_GATEWAY,DEFAULT_QUERY_ALL_COUNT,DelayedReveal,DropErc1155ClaimConditions,DropErc1155History,DropErc721ClaimConditions,DuplicateFileNameError,DuplicateLeafsError,Edition,EditionDrop,EditionMetadataInputOrUriSchema,EditionMetadataInputSchema,EditionMetadataOutputSchema,EditionMetadataWithOwnerOutputSchema,Erc1155,Erc1155SignatureMinting,Erc20,Erc20SignatureMinting,Erc721,Erc721SignatureMinting,EventType,FetchError,FileNameMissingError,FunctionDeprecatedError,GasCostEstimator,InterfaceId_IERC1155,InterfaceId_IERC721,InvalidAddressError,IpfsStorage,ListingNotFoundError,ListingType,Marketplace,MarketplaceAuction,MarketplaceDirect,MerkleSchema,MintRequest1155,MintRequest20,MintRequest721,MissingOwnerRoleError,MissingRoleError,NATIVE_TOKENS,NATIVE_TOKEN_ADDRESS,NFTCollection,NFTDrop,NotEnoughTokensError,NotFoundError,OZ_DEFENDER_FORWARDER_ADDRESS,OptionalPropertiesInput,OptionalPropertiesOutput,PINATA_IPFS_URL,Pack,PartialClaimConditionInputSchema,ProposalState,QuantityAboveLimitError,REMOTE_CONTRACT_NAME,REMOTE_CONTRACT_TO_CONTRACT_TYPE,RestrictedTransferError,SUPPORTED_CHAIN_IDS,Signature1155PayloadInput,Signature1155PayloadOutput,Signature20PayloadInput,Signature20PayloadOutput,Signature721PayloadInput,Signature721PayloadOutput,SnapshotAddress,SnapshotInfoSchema,SnapshotInputSchema,SnapshotSchema,Split,TW_IPFS_SERVER_URL,ThirdwebSDK,Token,TokenERC20History,TokenMintInputSchema,TransactionError,UnderlyingType,UploadError,Vote,VoteType,WrongListingTypeError,convertToTWError,createSnapshot,getContractAddressByChainId,getNativeTokenByChainId,getRoleHash,hashLeafNode});
//# sourceMappingURL=index.js.map